{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Mark/Documents/style_me_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Mark/Documents/style_me_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Cloudinary as CoreCloudinary,Util}from'cloudinary-core';export var url=function url(publicId,options){var scOptions=Util.withSnakeCaseKeys(options);var cl=CoreCloudinary.new();return cl.url(publicId,scOptions);};export var openUploadWidget=function openUploadWidget(options,callback){var scOptions=Util.withSnakeCaseKeys(options);window.cloudinary.openUploadWidget(scOptions,callback);};export function fetchPhotos(_x,_x2){return _fetchPhotos.apply(this,arguments);}function _fetchPhotos(){_fetchPhotos=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageTag,setter){var options,urlPath;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options={cloudName:'dnx8v0ryu',format:'json',type:'list',version:Math.ceil(new Date().getTime()/1000)};urlPath=url(imageTag.toString(),options);fetch(urlPath).then(function(res){return res.text();}).then(function(text){return text?setter(JSON.parse(text).resources.map(function(image){return image.public_id;})):[];}).catch(function(err){return console.log(err);});case 3:case\"end\":return _context.stop();}}},_callee);}));return _fetchPhotos.apply(this,arguments);};","map":{"version":3,"sources":["C:/Users/Mark/Documents/style_me_react/client/src/utils/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","openUploadWidget","callback","window","cloudinary","fetchPhotos","imageTag","setter","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","toString","fetch","then","res","text","JSON","parse","resources","map","image","public_id","catch","err","console","log"],"mappings":"uTAAA,OAASA,UAAU,GAAIC,CAAAA,cAAvB,CAAuCC,IAAvC,KAAmD,iBAAnD,CAEA,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,QAAD,CAAWC,OAAX,CAAuB,CACxC,GAAMC,CAAAA,SAAS,CAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB,CACA,GAAMG,CAAAA,EAAE,CAAGP,cAAc,CAACQ,GAAf,EAAX,CACA,MAAOD,CAAAA,EAAE,CAACL,GAAH,CAAOC,QAAP,CAAiBE,SAAjB,CAAP,CACD,CAJM,CAMP,MAAO,IAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACL,OAAD,CAAUM,QAAV,CAAuB,CACrD,GAAML,CAAAA,SAAS,CAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB,CACAO,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCJ,SAAnC,CAA8CK,QAA9C,EACD,CAHM,CAKP,eAAuBG,CAAAA,WAAvB,oD,6FAAO,iBAA8BC,QAA9B,CAAwCC,MAAxC,sIACCX,OADD,CACW,CAChBY,SAAS,CAAE,WADK,CAEhBC,MAAM,CAAE,MAFQ,CAGhBC,IAAI,CAAE,MAHU,CAIhBC,OAAO,CAAEC,IAAI,CAACC,IAAL,CAAU,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,IAAjC,CAJO,CADX,CAQDC,OARC,CAQStB,GAAG,CAACY,QAAQ,CAACW,QAAT,EAAD,CAAsBrB,OAAtB,CARZ,CAUPsB,KAAK,CAACF,OAAD,CAAL,CACCG,IADD,CACM,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADT,EAECF,IAFD,CAEM,SAAAE,IAAI,QAAKA,CAAAA,IAAI,CAAGd,MAAM,CAACe,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAAjB,CAA2BC,GAA3B,CAA+B,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,SAAV,EAApC,CAAD,CAAT,CAAsE,EAA/E,EAFV,EAGCC,KAHD,CAGO,SAAAC,GAAG,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ,EAHV,EAVO,sD,8CAcN","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  const cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\n\nexport const openUploadWidget = (options, callback) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\n\nexport async function  fetchPhotos  (imageTag, setter)  {\n  const options = {\n  cloudName: 'dnx8v0ryu',\n  format: 'json',\n  type: 'list',\n  version: Math.ceil(new Date().getTime() / 1000),\n};\n\nconst urlPath = url(imageTag.toString(), options);\n\nfetch(urlPath)\n.then(res => res.text())\n.then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\n.catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}