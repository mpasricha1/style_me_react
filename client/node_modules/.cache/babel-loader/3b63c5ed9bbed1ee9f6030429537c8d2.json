{"ast":null,"code":"import _regeneratorRuntime from \"/Users/estebanmendez/Desktop/style_me_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/estebanmendez/Desktop/style_me_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\nexport var url = function url(publicId, options) {\n  var scOptions = Util.withSnakeCaseKeys(options);\n  var cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\nexport var openUploadWidget = function openUploadWidget(options, callback) {\n  var scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\nexport function fetchPhotos(_x, _x2) {\n  return _fetchPhotos.apply(this, arguments);\n}\n\nfunction _fetchPhotos() {\n  _fetchPhotos = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageTag, setter) {\n    var options, urlPath;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = {\n              cloudName: 'dnx8v0ryu',\n              format: 'json',\n              type: 'list',\n              version: Math.ceil(new Date().getTime() / 1000)\n            };\n            urlPath = url(imageTag.toString(), options);\n            fetch(urlPath).then(function (res) {\n              return res.text();\n            }).then(function (text) {\n              return text ? setter(JSON.parse(text).resources.map(function (image) {\n                return image.public_id;\n              })) : [];\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchPhotos.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/Users/estebanmendez/Desktop/style_me_react/client/src/utils/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","openUploadWidget","callback","window","cloudinary","fetchPhotos","imageTag","setter","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","toString","fetch","then","res","text","JSON","parse","resources","map","image","public_id","catch","err","console","log"],"mappings":";;AAAA,SAASA,UAAU,IAAIC,cAAvB,EAAuCC,IAAvC,QAAmD,iBAAnD;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,QAAD,EAAWC,OAAX,EAAuB;AACxC,MAAMC,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACA,MAAMG,EAAE,GAAGP,cAAc,CAACQ,GAAf,EAAX;AACA,SAAOD,EAAE,CAACL,GAAH,CAAOC,QAAP,EAAiBE,SAAjB,CAAP;AACD,CAJM;AAMP,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,OAAD,EAAUM,QAAV,EAAuB;AACrD,MAAML,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACAO,EAAAA,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCJ,SAAnC,EAA8CK,QAA9C;AACD,CAHM;AAKP,gBAAuBG,WAAvB;AAAA;AAAA;;;0EAAO,iBAA8BC,QAA9B,EAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCX,YAAAA,OADD,GACW;AAChBY,cAAAA,SAAS,EAAE,WADK;AAEhBC,cAAAA,MAAM,EAAE,MAFQ;AAGhBC,cAAAA,IAAI,EAAE,MAHU;AAIhBC,cAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CAAU,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;AAJO,aADX;AAQDC,YAAAA,OARC,GAQStB,GAAG,CAACY,QAAQ,CAACW,QAAT,EAAD,EAAsBrB,OAAtB,CARZ;AAUPsB,YAAAA,KAAK,CAACF,OAAD,CAAL,CACCG,IADD,CACM,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aADT,EAECF,IAFD,CAEM,UAAAE,IAAI;AAAA,qBAAKA,IAAI,GAAGd,MAAM,CAACe,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAAjB,CAA2BC,GAA3B,CAA+B,UAAAC,KAAK;AAAA,uBAAIA,KAAK,CAACC,SAAV;AAAA,eAApC,CAAD,CAAT,GAAsE,EAA/E;AAAA,aAFV,EAGCC,KAHD,CAGO,UAAAC,GAAG;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,aAHV;;AAVO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcN","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  const cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\n\nexport const openUploadWidget = (options, callback) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\n\nexport async function  fetchPhotos  (imageTag, setter)  {\n  const options = {\n  cloudName: 'dnx8v0ryu',\n  format: 'json',\n  type: 'list',\n  version: Math.ceil(new Date().getTime() / 1000),\n};\n\nconst urlPath = url(imageTag.toString(), options);\n\nfetch(urlPath)\n.then(res => res.text())\n.then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\n.catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}